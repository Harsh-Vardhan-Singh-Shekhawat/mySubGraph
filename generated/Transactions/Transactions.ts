// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Transfer extends ethereum.Event {
  get params(): Transfer__Params {
    return new Transfer__Params(this);
  }
}

export class Transfer__Params {
  _event: Transfer;

  constructor(event: Transfer) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get receiver(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get message(): string {
    return this._event.parameters[3].value.toString();
  }

  get timestamp(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get keyword(): string {
    return this._event.parameters[5].value.toString();
  }
}

export class Transactions__getAllTransactionsResultValue0Struct extends ethereum.Tuple {
  get sender(): Address {
    return this[0].toAddress();
  }

  get receiver(): Address {
    return this[1].toAddress();
  }

  get amount(): BigInt {
    return this[2].toBigInt();
  }

  get message(): string {
    return this[3].toString();
  }

  get timestamp(): BigInt {
    return this[4].toBigInt();
  }

  get keyword(): string {
    return this[5].toString();
  }
}

export class Transactions extends ethereum.SmartContract {
  static bind(address: Address): Transactions {
    return new Transactions("Transactions", address);
  }

  getAllTransactions(): Array<
    Transactions__getAllTransactionsResultValue0Struct
  > {
    let result = super.call(
      "getAllTransactions",
      "getAllTransactions():((address,address,uint256,string,uint256,string)[])",
      []
    );

    return result[0].toTupleArray<
      Transactions__getAllTransactionsResultValue0Struct
    >();
  }

  try_getAllTransactions(): ethereum.CallResult<
    Array<Transactions__getAllTransactionsResultValue0Struct>
  > {
    let result = super.tryCall(
      "getAllTransactions",
      "getAllTransactions():((address,address,uint256,string,uint256,string)[])",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTupleArray<
        Transactions__getAllTransactionsResultValue0Struct
      >()
    );
  }

  getTransactionsCount(): BigInt {
    let result = super.call(
      "getTransactionsCount",
      "getTransactionsCount():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getTransactionsCount(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getTransactionsCount",
      "getTransactionsCount():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  transactionsCount(): BigInt {
    let result = super.call(
      "transactionsCount",
      "transactionsCount():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_transactionsCount(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "transactionsCount",
      "transactionsCount():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class AddToBlockchainCall extends ethereum.Call {
  get inputs(): AddToBlockchainCall__Inputs {
    return new AddToBlockchainCall__Inputs(this);
  }

  get outputs(): AddToBlockchainCall__Outputs {
    return new AddToBlockchainCall__Outputs(this);
  }
}

export class AddToBlockchainCall__Inputs {
  _call: AddToBlockchainCall;

  constructor(call: AddToBlockchainCall) {
    this._call = call;
  }

  get receiver(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get message(): string {
    return this._call.inputValues[1].value.toString();
  }

  get keyword(): string {
    return this._call.inputValues[2].value.toString();
  }
}

export class AddToBlockchainCall__Outputs {
  _call: AddToBlockchainCall;

  constructor(call: AddToBlockchainCall) {
    this._call = call;
  }
}
